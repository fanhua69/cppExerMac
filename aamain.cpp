
#include <windows.h>

#include <iostream>
#include <string>
#include <map>
#include <vector>

int atexit(void(*function)(void));

void f1()
{
  printf("f1\n");
};

void f2()
{
  printf("f2\n");
};


void construction();
void unknown(int num, ...);
void testv();
int bit(unsigned int x);
void uniontest();
int thread();
int EightQueens();
int harrypotterlessons();
void inheritance();
void oct();
int multiinheritance();
int pointer();
void testsizeof();
void datagroup();
void stringtest();
void macro();
void functionpointer();
void strcpy();
int test();
void find_maximum_subarray();
void find_maximum_subarray_2();
void FIND_MAXIMUM_SUBARRAY();
void packbytes();
int virtualdestruction();
void * operator new (std::size_t);
void virtualinherit();
int auto_ptr1();
void templateex();
void printfff();
void variadicsummain();
void variadicmultiplymain();
void variadicaddmain();
int argv();
void variadiccomma();
void variadiclamda();
void functor();
void absort();
void foreachtest();
void smartpointer();
void lamda();
int threadsafe();
void threadmain();
void thread_atomic_flag();
void tree();
void alignasmain();
void unicode();
void constructorinheritance();
void variableoverride();
void userdefinedliteral();
void implicitconversion();
void exceptionmain();
void templatespecialization();
void initializerlist();
void concatenator();
void copyconstruction();
void nullptrmain();
void decltypemain();
void functiontype();
void constantexpr();
void destructor();
void pipelineserver();
void commonmemserver();
void constmain();
void integerconversin();
void globalvalue();
void implicitconversion2();
void hexchar();
void structure(void);
void binding();
void hidingfunctions();
void bitoper();
void StructureStore();
void nodereversemain();
void collectdata();
void searchanumber();
void sleepWindows();
void searchRotateArray();
void chessGeneral();
void xortest();
void graphcolorMain();
void threadreadwrite();
void threadrace();
void thread4files();
void threadbuffer();
void threadreaders();
void threadpromise();
void threadclassmain();
void mutablemain();
int fireworksmain();
void threadfuture2();
int stdfunction();
int stdbind();
int stdref();
void stdpackage();
void threadatomic();
int staticassert();
void templateextern();
using namespace std;
void substitutionfailure();
void substitutionfailure2();
int stddecay();
void sfinae();
int inlinenamespace();
void rawstringliterals();
void perfectforwarding1();
int RVO();
void trailingreturntype();
void templatealias();
void macrocplusplus();
void stringc99();
void variablename();
void alignstorage();
void singleton();
void singleton2();
void explicitoprator();
void sqlitetest();
void typedefmain();
int lambdamove();
void variabletamplate();
void boostany();
int stdtraits();
int stdtraits();
void writememory();
int enableif();
void userdefinedliterals();
void variadicparfunction();
void variadicfunction2();
void variadicmicros();
int variadiciterativ();
void testconstmain();
void inheritedconstructor();
void stdtransform();
void funtionpar();
void balancedSumMain();
void doubleListMain();
void variadictemplate();
void templatespecialization2();
void variadictemplatetest();
int hashtest();
void longlong();
void podmain();
void lvalueref();
void tuplemain();
void pigeonsort();
void onescomplementry();
int dijkstraMain();
void getBalanceArrayMain();
void equilibrium();
void binarygap();
void setbitsrange();
int depthlevellist();
int findLCAMain();
int threadtestandset();
void hiding(void);
void pthreadtest();
int pthreadcond();
void pthreadsem();
void graphMain();
void seismicMain();
void stdremove();
void streammain2();
void stdvector();
void stdregex();
void stdchrono();
void stdrandom();
void stdexception();
int pthreadkey(void);
int stringreverse();
void calculator();
void boostoptional();
void singletonProblems();
void memorymodel();
void pthreadsched();
void pthreadonce();
void pthreadbarrier();
void pthreadspinlock();
int pthreadReaderOverWriter();
void checkLoopInListMain();
void findMaxDiffMain();
void reverseListMain();
void findRouteOfMatrixMain();
void hextodecimalmain();
void waterContainer();
void find2indexesforsumMain();
void cloneListMain();
void mapCleanMain();
void testIncMain();
void sharePtrMain();
int smartptrmain();
void SmartPointerMain();
void mystrcatMain();
void hashmain();
void bitmove();
void rightloopstringmain();
void myarraymain();
void multimapmain();
void sortmain();
void setmain();
void typeidmain();
void functionpointer();
void pointers();
void modifyvalues();
void typedef2();
int visitormain();
void findAllRouteWeightsMain();
void findAllPrimesMain();
void pthreadtrylock();
int stddqueue();
void sudoku();
void findgcfmain();
int encrypt();
void findmaxsummain();
void findsqrt();
void va_listMain();
int singletonhungry();
void covariantreturn();
int patterncommand();
void patternviditorbefore();
void pattern_visitor_after();
void patternVisitorCPU();
void patterncommandnumber();
int doubledispatch();
void purevirtualbase();
void purevirtualclassB();
void virtualbaseclass();
void typeconversionmain();
void rvalue();
void constMemberMain();
void structaddress2();
void virtualtablemain();
void referencedelete();
void defaultparoverride();
bool addsame(const char *fileIn, const char *fileOut);
void knapsackmemain();
void FHGraphMain();
void listCheckCycleReverseMain();
void listFindStartCycleMain();
void FHGrapTopoOrderMain();
int btreemain();
int futuremain();
int packaged_task_main();
void templateint();
void functortemplate();
int templatedouble();
void interval_map_main();
int commandpattern();
void anonymousunion();
int statemachinemain();
int statemachineremoveblank();
void threewaycomp();
int futureAndPromise();
void futureAndPromise2();
void stdproduceconsume();
void singletonBoostMain();
void singletonLazyMode();
int threadpassingref();
int threaddetach();
int threadlocal();
void templatetestinheritance();
int staticcast();
void throwexception();
void productofarray();
void poinercalculation();
int inheritancepointer(void);
int virtualfunction();
void shellsortmain();
int uniquepointer();
void stdmove();
void foreach2();
void stdmove();
void findfirstsinglecharMain();
int dynamiccastmain();
int stdmakeheapmain();
void stdstackmain();
int findallpathsinroom();
void autotypededuction();
int findmsbofinteger();
void bitoperation();
int findAllRoutesMain();
void findShortestCutMain();
void breadthTraversalMain();
void topoSortMain();
void findLongestSubSequenceMain();
void findLongestCommonSubsequenceMain();
void findMSTMain();
void findMinSpanTreePrimMain();
void nontypeTemplateParameter();
void boostany();
void adjacent_differenceMain();
void partial_sumMain();
void accumulateMain();
void sumproductmain();
void iotamain();
void quicksortmain();
void adjacentfindmain();
void nthelementmain();
void lexicographical_comparemain();
void equalrangemain();
void setdifferencemain();
void stdstringstream();
void stdstring();
void stdcatchexception();
void typeidmain();
void templatespecialization3();
 int templatespecialization4();
void namespacemain();
void MyClassMain();
void classtemplatemain();
void myunionmain();
void dynamiccast2();
void constcastmain();
extern "C" void testcmain();
void descallmain();
int complmain();
void constarray();
int binaryfunctionmain();
int binaryfunctionmain2();
int functor2main();
void heapMain();
void lambdamain();
void kClosestMain();
void kClosestMain2();
void findMedianMain();
void isPalindromeMain();
void isMatchMain();
void longestCommonPrefixMain();
void sudokuMain();
void findLongestParenthesesMain();
void QueenMain();
void getSlyLineMain();
void priorityQueueMain();
void stdheapmain();
void virtualFunction();
void letterShiftMain();
void shortestPathLengthMain();
void NumberSumMaxMain();
void letterLadderMain();
void LCWMain();

void findKSmallestFrationMain();
void trapRainMain();
void findFirstMissingIntegerMain();
void findSmallestSuperStringMain();
void FabsMain();
void DijkstraMain();
void flipStringMain();
void smallestStringKickMain();
void checkDropGridMain();
void findMedianOfStreamMain();
void stockSellMain();




#include "constMember.h"
extern "C" 
{
  void alignment2();
}

//#pragma pack(1)

int fun(int a)
{
  return 12 + a;
}

void main(int argc, char **argv)
{
    stockSellMain();

    cout << endl;
    cout << "Program ended, press any key to continue ... " << endl;
    getchar();
    //system("PAUSE");
}